// Copyright (C) 2016 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package l2;

enum L2Flag {
    FLAG_UNKNOWN = 0;
    FLAG_DISCARD_SRC = 2;
    FLAG_DISCARD_DST = 4;
    FLAG_L3LOOKUP = 0x10;
    FLAG_STATIC = 0x20;
    FLAG_MOVE_PORT = 0x00100000;
}

enum L2Operation {
    DELETE = 0;
    ADD = 1;
    REPORT = 2;
    LEARN_EVENT = 3;
    AGE_EVENT = 4;
    MOVE_EVENT = 5;
}

message Address {
    L2Flag flags = 1;
//    uint32 reserved1 = 2;
    bytes mac = 3;
    uint32 vid = 4;
    int64 port = 5;
    int64 mod_id = 6;
    int64 trunk_id = 7;
}

enum L2CacheFlag {
    CPU = 0;
    DISCARD = 1;
    BPDU = 0x10;
}

message CacheAddress {
    uint32 flags = 1;
    uint32 station_flags = 2;
    bytes mac = 3;
    bytes mac_mask = 4;
    uint32 vid = 5;
    uint32 vid_mask = 6;
    int64 src_port = 7;
    int64 src_port_mask = 8;
    int64 dst_mod_id = 9;
    int64 dst_port = 10;
    int64 dst_trunk = 11;
    int64 prio = 12;
    repeated uint32 dst_ports = 13;
    int64 lookup_class = 14;
    uint32 subtype = 15;
    int64 encap_id = 16;
    int64 group = 17;
    uint32 ethertype = 18;
    uint32 ethertype_mask = 19;
}

message AddAddressRequest {
    int64 unit = 1;
    Address address = 2;
}

message AddAddressResponse {
}

enum L2DeleteFlag {
    DELETE_UNKNOWN = 0;
    DELETE_STATIC = 1;
    DELETE_PENDING = 2;
    DELETE_NO_CALLBACKS = 3;
}

message DeleteAddressRequest {
    int64 unit = 1;
    bytes mac = 2;
    uint32 vid = 3;
}

message DeleteAddressResponse {
}

message DeleteAddressByPortRequest {
    int64 unit = 1;
    int64 mod = 2;
    int64 port = 3;
    L2DeleteFlag flags = 4;
}

message DeleteAddressByPortResponse {
}

message DeleteAddressByMACRequest {
    int64 unit = 1;
    bytes mac = 2;
    L2DeleteFlag flags = 3;
}

message DeleteAddressByMACResponse {
}

message DeleteAddressByVLANRequest {
    int64 unit = 1;
    uint32 vid = 2;
    L2DeleteFlag flags = 3;
}

message DeleteAddressByVLANResponse {
}

message DeleteAddressByTrunkRequest {
    int64 unit = 1;
    int64 tid = 2;
    L2DeleteFlag flags = 3;
}

message DeleteAddressByTrunkResponse {
}

message DeleteAddressByMACPortRequest {
    int64 unit = 1;
    bytes mac = 2;
    int64 mod = 3;
    int64 port = 4;
    L2DeleteFlag flags = 5;
}

message DeleteAddressByMACPortResponse {
}

message DeleteAddressByVLANPortRequest {
    int64 unit = 1;
    uint32 vid = 2;
    int64 mod = 3;
    int64 port = 4;
    L2DeleteFlag flags = 5;
}

message DeleteAddressByVLANPortResponse {
}

message DeleteAddressByVLANTrunkRequest {
    int64 unit = 1;
    uint32 vid = 2;
    int64 tid = 3;
    L2DeleteFlag flags = 4;
}

message DeleteAddressByVLANTrunkResponse {
}

message GetAddressRequest {
    int64 unit = 1;
    bytes mac = 2;
    uint32 vid = 3;
}

message GetAddressResponse {
    Address address = 1;
}

message MonitorRequest {
    int64 unit = 1;
}

message MonitorResponse{
    int64 unit = 1;
    Address address = 2;
    L2Operation operation = 3;
}

message SetAgeTimerRequest {
    int64 unit = 1;
    int64 age_seconds = 2;
}

message SetAgeTimerResponse {
}

message GetAgeTimerRequest {
    int64 unit = 1;
}

message GetAgeTimerResponse {
    int64 age_seconds = 1;
}

message ListRequest {
    int64 unit = 1;
}

message ListResponse {
    repeated Address list = 1;
}

message Station {
    L2StationFlag flags = 1;
    bytes dst_mac = 2;
    bytes dst_mac_mask = 3;
    uint32 vid = 4;
    uint32 vid_mask = 5;
}

enum L2StationFlag {
    STATION_UNKNOWN = 0;
    STATION_WITH_ID = 1;
    STATION_IPV4 = 2;
    STATION_IPV6 = 4;
    STATION_ARP_RARP = 8;
}

message StationAddRequest {
    int64 unit = 1;
    int64 station_id = 2;
    Station station = 3;
}

message StationAddResponse {
    int64 station_id = 1;
}

message StationDeleteRequest {
    int64 unit = 1;
    int64 station_id = 2;
}

message StationDeleteResponse {
}

message StationGetRequest {
    int64 unit = 1;
    int64 station_id = 2;
}

message StationGetResponse {
    Station station = 1;
}
