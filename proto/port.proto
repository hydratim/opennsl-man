// Copyright (C) 2016 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package port;

//enum MODE {
//    MODE_10MB_HD = 0;
//    MODE_10MB_FD = 1;
//    MODE_100MB_HD = 2;
//    MODE_100MB_FD = 3;
//    MODE_1000MB_HD = 4;
//    MODE_1000MB_FD = 5;
//    MODE_2500MB_HD = 6;
//    MODE_2500MB_FD = 7;
//    MODE_10GB_HD = 8;
//    MODE_10GB_FD = 9;
//    MODE_PAUSE_TX = 10;
//    MODE_PAUSE_RX = 11;
//    MODE_PAUSE_ASYMM = 12;
//    MODE_TBI = 13;
//    MODE_MII = 14;
//    MODE_GMII = 15;
//    MODE_SGMII = 16;
//    MODE_XGMII = 17;
//    MODE_LB_MAC = 18;
//    MODE_LB_NONE = 19;
//    MODE_LB_PHY = 20;
//    MODE_AN = 21;
//    MODE_12GB_HD = 22;
//    MODE_12GB_FD = 23;
//    MODE_13GB_HD = 24;
//    MODE_13GB_FD = 25;
//    MODE_16GB_HD = 26;
//    MODE_16GB_FD = 27;
//
//    MODE_3000MB_HD = 29;
//    MODE_3000MB_FD = 30;
//    MODE_COMBO = 31;
//}
//

enum InterfaceType {
    IF_TYPE_NOCXN = 0;
    IF_TYPE_NULL = 1;
    IF_TYPE_MII = 2;
    IF_TYPE_GMII = 3;
    IF_TYPE_SGMII = 4;
    IF_TYPE_TBI = 5;
    IF_TYPE_XGMII = 6;
    IF_TYPE_RGMII = 7;
    IF_TYPE_RvMII = 8;
    IF_TYPE_SFI = 9;
    IF_TYPE_XFI = 10;
    IF_TYPE_KR = 11;
    IF_TYPE_KR4 = 12;
    IF_TYPE_CR = 13;
    IF_TYPE_CR4 = 14;
    IF_TYPE_XLAUI = 15;
    IF_TYPE_SR = 16;
    IF_TYPE_RXAUI = 17;
    IF_TYPE_XAUI = 18;
    IF_TYPE_SPAUI = 19;
    IF_TYPE_QSGMII = 20;
    IF_TYPE_ILKN = 21;
    IF_TYPE_RCY = 22;
    IF_TYPE_FAT_PIPE = 23;
    IF_TYPE_CGMII = 24;
    IF_TYPE_CAUI = 25;
    IF_TYPE_LR = 26;
    IF_TYPE_LR4 = 27;
    IF_TYPE_SR4 = 28;
    IF_TYPE_KX = 29;
    IF_TYPE_ZR = 30;
    IF_TYPE_SR10 = 31;
    IF_TYPE_OTL = 32;
    IF_TYPE_CPU = 33;
    IF_TYPE_OLP = 34;
    IF_TYPE_OAMP = 35;
    IF_TYPE_ERP = 36;
    IF_TYPE_TM_INTERNAL_PKT = 37;
    IF_TYPE_SR2 = 38;
    IF_TYPE_KR2 = 39;
    IF_TYPE_CR2 = 40;
    IF_TYPE_XFI2 = 41;
    IF_TYPE_XLAUI2 = 42;
    IF_TYPE_CR10 = 43;
    IF_TYPE_KR10 = 44;
    IF_TYPE_LR10 = 45;
    IF_TYPE_ER = 46;
    IF_TYPE_ER2 = 47;
    IF_TYPE_ER4 = 48;
    IF_TYPE_CX = 49;
    IF_TYPE_CX2 = 50;
    IF_TYPE_CX4 = 51;
    IF_TYPE_CAUI_C2C = 52;
    IF_TYPE_CAUI_C2M = 53;
    IF_TYPE_VSR = 54;
    IF_TYPE_LR2 = 55;
    IF_TYPE_LRM = 56;
    IF_TYPE_XLPPI = 57;
    IF_TYPE_COUNT = 58; /* last, please */
}

//enum MDIXMode {
//    MDIX_MODE_AUTO = 0;
//    MDIX_MODE_FORCE_AUTO = 1;
//    MDIX_MODE_NORMAL = 2;
//    MDIX_MODE_XOVER = 3;
//    MDIX_MODE_COUNT = 4;
//}
//
//enum MDIXStatus {
//    MDIX_STATUS_NORMAL = 0;
//    MDIX_STATUS_XOVER = 1;
//    MDIX_STATUS_COUNT = 2;
//}
//
//enum Medium {
//    MEDIUM_NONE = 0;
//    MEDIUM_COPPER = 1;
//    MEDIUM_FIBER = 2;
//    MEDIUM_COUNT = 3;
//}

message Ability {
    uint64 speed_half_duplex = 1;
    uint64 speed_full_duplex = 2;
    uint64 pause = 3;
    uint64 interface = 4;
    uint64 medium = 5;
    uint64 loopback = 6;
    uint64 flags = 7;
    uint64 eee = 8;
    uint64 fcmap = 9;
//    encap = 10;
    uint64 fec = 11;
}

message PortConfig {
    repeated uint32 fe = 1;
    repeated uint32 ge = 2;
    repeated uint32 xe = 3;
    repeated uint32 ce = 4;
    repeated uint32 e = 5;
    repeated uint32 hg = 6;
    repeated uint32 sci = 7;
    repeated uint32 sfi = 8;
    repeated uint32 spi = 9;
    repeated uint32 spi_subport = 10;
    repeated uint32 port = 11;
    repeated uint32 cpu = 12;
    repeated uint32 all = 13;
    repeated uint32 stack_int = 14;
    repeated uint32 stack_ext = 15;
    repeated uint32 tdm = 16;
    repeated uint32 pon = 17;
    repeated uint32 llid = 18;
    repeated uint32 xl = 19;
    repeated uint32 rcy = 20;
//    opennsl_pbmp_t per_pipe[OPENNSL_PIPES_MAX]; /**< Mask of ports per pipe. The number of
//                                           pipes per device can be obtained via
//                                           num_pipes field of opennsl_info_t. */
    repeated uint32 nif = 22;
    repeated uint32 control = 23;
}

message PortInfo {
    uint32 action_mask = 1;
    uint32 action_mask2 = 2;
    int64 enable = 3;
    int64 link_status = 4;
    int64 auto_neg = 5;
    int64 speed = 6;
    int64 duplex = 7;
    int64 linkscan = 8;
    uint32 learn = 9;
    int64 discard = 10;
    uint32 vlanfilter = 11;
    int64 untagged_priority = 12;
//    opennsl_vlan_t untagged_vlan;       
//    int stp_state;                      
//    int pfm;                            
//    int loopback;                       
//    int phy_master;                     
//    opennsl_port_if_t interface;        
//    int pause_tx;                       
//    int pause_rx;                       
//    int encap_mode;                     
//    opennsl_mac_t pause_mac;            
//    opennsl_port_abil_t local_advert;   
//    opennsl_port_ability_t local_ability; 
//    int remote_advert_valid;            
//    opennsl_port_abil_t remote_advert;  
//    opennsl_port_ability_t remote_ability; 
//    int mcast_limit;                    
//    int mcast_limit_enable;             
//    int bcast_limit;                    
//    int bcast_limit_enable;             
//    int dlfbc_limit;                    
//    int dlfbc_limit_enable;             
//    int speed_max;                      
//    opennsl_port_abil_t ability;        
//    opennsl_port_ability_t port_ability; 
//    int frame_max;                      
//    opennsl_port_mdix_t mdix;           
//    opennsl_port_mdix_status_t mdix_status; 
//    opennsl_port_medium_t medium;       
//    uint32 fault;  
}

message InitRequest {
    int64 unit = 1;
}

message InitResponse {
}

message ClearRequest {
    int64 unit = 1;
}

message ClearResponse {
}

message ProbeRequest {
    int64 unit = 1;
    repeated uint32 pbmp = 2;
}

message ProbeResponse {
    repeated uint32 pbmp = 1;
}

message DetachRequest {
    int64 unit = 1;
    repeated uint32 pbmp = 2;
}

message DetachResponse {
    repeated uint32 pbmp = 1;
}

message GetConfigRequest {
    int64 unit = 1;
}

message GetConfigResponse {
    PortConfig config = 1;
}

message GetPortNameRequest {
    int64 unit = 1;
    int64 port = 2;
}

message GetPortNameResponse {
    string name = 1;
}

message PortEnableSetRequest {
    int64 unit = 1;
    int64 port = 2;
    bool enable = 3;
}

message PortEnableSetResponse {
}

message PortEnableGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortEnableGetResponse {
    bool enable = 1;
}

message PortAdvertSetRequest {
    int64 unit = 1;
    int64 port = 2;
    uint64 ability = 3;
}

message PortAdvertSetResponse {
}

message PortAdvertGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortAdvertGetResponse {
    uint64 ability = 1;
}

message PortAbilityAdvertSetRequest {
    int64 unit = 1;
    int64 port = 2;
    Ability ability = 3;
}

message PortAbilityAdvertSetResponse {
}

message PortAbilityAdvertGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortAbilityAdvertGetResponse {
    Ability ability = 1;
}

message PortAdvertRemoteGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortAdvertRemoteGetResponse {
    uint64 ability = 3;
}

message PortAbilityRemoteGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortAbilityRemoteGetResponse {
    Ability ability = 1;
}

message PortAbilityGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortAbilityGetResponse {
    uint64 ability = 1;
}

message PortAbilityLocalGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortAbilityLocalGetResponse {
    Ability ability = 1;
}

message PortLinkscanSetRequest {
    int64 unit = 1;
    int64 port = 2;
    int64 linkscan = 3;
}

message PortLinkscanSetResponse {
}

message PortLinkscanGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortLinkscanGetResponse {
    int64 linkscan = 1;
}

message PortAutonegSetRequest {
    int64 unit = 1;
    int64 port = 2;
    bool enable = 3;
}

message PortAutonegSetResponse {
}

message PortAutonegGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortAutonegGetResponse {
    bool enabled = 1;
}

message PortSpeedMAXRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortSpeedMAXResponse {
    int64 speed = 1;
}

message PortSpeedSetRequest {
    int64 unit = 1;
    int64 port = 2;
    int64 speed = 3;
}

message PortSpeedSetResponse {
}

message PortSpeedGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortSpeedGetResponse {
    int64 speed = 1;
}

message PortInterfaceSetRequest {
    int64 unit = 1;
    int64 port = 2;
    InterfaceType type = 3;
}

message PortInterfaceSetResponse {
}

message PortInterfaceGetRequest {
    int64 unit = 1;
    int64 port = 2;
}

message PortInterfaceGetResponse {
    InterfaceType type = 1;
}
