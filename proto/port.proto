// Copyright (C) 2016 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package port;

message PortConfig {
    bytes fe = 1;
    bytes ge = 2;
    bytes xe = 3;
    bytes ce = 4;
    bytes e = 5;
    bytes hg = 6;
    bytes sci = 7;
    bytes sfi = 8;
    bytes spi = 9;
    bytes spi_subport = 10;
    bytes port = 11;
    bytes cpu = 12;
    bytes all = 13;
    bytes stack_int = 14;
    bytes stack_ext = 15;
    bytes tdm = 16;
    bytes pon = 17;
    bytes llid = 18;
    bytes xl = 19;
    bytes rcy = 20;
//    opennsl_pbmp_t per_pipe[OPENNSL_PIPES_MAX]; /**< Mask of ports per pipe. The number of
//                                           pipes per device can be obtained via
//                                           num_pipes field of opennsl_info_t. */
    bytes nif = 22;
    bytes control = 23;
}

message PortInfo {
    uint32 action_mask = 1;
    uint32 action_mask2 = 2;
    int64 enable = 3;
    int64 link_status = 4;
    int64 auto_neg = 5;
    int64 speed = 6;
    int64 duplex = 7;
    int64 linkscan = 8;
    uint32 learn = 9;
    int64 discard = 10;
    uint32 vlanfilter = 11;
    int64 untagged_priority = 12;
//    opennsl_vlan_t untagged_vlan;       
//    int stp_state;                      
//    int pfm;                            
//    int loopback;                       
//    int phy_master;                     
//    opennsl_port_if_t interface;        
//    int pause_tx;                       
//    int pause_rx;                       
//    int encap_mode;                     
//    opennsl_mac_t pause_mac;            
//    opennsl_port_abil_t local_advert;   
//    opennsl_port_ability_t local_ability; 
//    int remote_advert_valid;            
//    opennsl_port_abil_t remote_advert;  
//    opennsl_port_ability_t remote_ability; 
//    int mcast_limit;                    
//    int mcast_limit_enable;             
//    int bcast_limit;                    
//    int bcast_limit_enable;             
//    int dlfbc_limit;                    
//    int dlfbc_limit_enable;             
//    int speed_max;                      
//    opennsl_port_abil_t ability;        
//    opennsl_port_ability_t port_ability; 
//    int frame_max;                      
//    opennsl_port_mdix_t mdix;           
//    opennsl_port_mdix_status_t mdix_status; 
//    opennsl_port_medium_t medium;       
//    uint32 fault;  
}

message InitRequest {
    int64 unit = 1;
}

message InitResponse {
}

message ClearRequest {
    int64 unit = 1;
}

message ClearRespones {
}

message ProbeRequest {
    int64 unit = 1;
    bytes pbmp = 2;
}

message ProbeResponse {
    bytes pbmp = 1;
}

message DetachRequest {
    int64 unit = 1;
    bytes pbmp = 2;
}

message DetachResponse {
    bytes pbmp = 1;
}

message GetConfigRequest {
    int64 unit = 1;
}

message GetConfigResponse {
    PortConfig config = 1;
}

message GetPortNameRequest {
    int64 unit = 1;
    int64 port = 2;
}

message GetPortNameResponse {
    string name = 1;
}
