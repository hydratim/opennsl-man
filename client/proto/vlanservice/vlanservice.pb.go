// Code generated by protoc-gen-go.
// source: vlanservice.proto
// DO NOT EDIT!

/*
Package vlanservice is a generated protocol buffer package.

It is generated from these files:
	vlanservice.proto

It has these top-level messages:
*/
package vlanservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import vlan "github.com/ishidawataru/opennsl-server/client/proto/vlan"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for VLAN service

type VLANClient interface {
	Create(ctx context.Context, in *vlan.CreateRequest, opts ...grpc.CallOption) (*vlan.CreateResponse, error)
	Destroy(ctx context.Context, in *vlan.DestroyRequest, opts ...grpc.CallOption) (*vlan.DestroyResponse, error)
	DestroyAll(ctx context.Context, in *vlan.DestroyAllRequest, opts ...grpc.CallOption) (*vlan.DestroyAllResponse, error)
	PortAdd(ctx context.Context, in *vlan.PortAddRequest, opts ...grpc.CallOption) (*vlan.PortAddResponse, error)
	PortRemove(ctx context.Context, in *vlan.PortRemoveRequest, opts ...grpc.CallOption) (*vlan.PortRemoveRequest, error)
	GPortAdd(ctx context.Context, in *vlan.GPortAddRequest, opts ...grpc.CallOption) (*vlan.GPortAddResponse, error)
	GPortDelete(ctx context.Context, in *vlan.GPortDeleteRequest, opts ...grpc.CallOption) (*vlan.GPortDeleteResponse, error)
	GPortDeleteAll(ctx context.Context, in *vlan.GPortDeleteAllRequest, opts ...grpc.CallOption) (*vlan.GPortDeleteAllResponse, error)
	List(ctx context.Context, in *vlan.ListRequest, opts ...grpc.CallOption) (*vlan.ListResponse, error)
	DefaultGet(ctx context.Context, in *vlan.DefaultGetRequest, opts ...grpc.CallOption) (*vlan.DefaultGetResponse, error)
	DefaultSet(ctx context.Context, in *vlan.DefaultSetRequest, opts ...grpc.CallOption) (*vlan.DefaultSetResponse, error)
	ControlSet(ctx context.Context, in *vlan.ControlSetRequest, opts ...grpc.CallOption) (*vlan.ControlSetResponse, error)
	ControlPortSet(ctx context.Context, in *vlan.ControlPortSetRequest, opts ...grpc.CallOption) (*vlan.ControlPortSetResponse, error)
}

type vLANClient struct {
	cc *grpc.ClientConn
}

func NewVLANClient(cc *grpc.ClientConn) VLANClient {
	return &vLANClient{cc}
}

func (c *vLANClient) Create(ctx context.Context, in *vlan.CreateRequest, opts ...grpc.CallOption) (*vlan.CreateResponse, error) {
	out := new(vlan.CreateResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) Destroy(ctx context.Context, in *vlan.DestroyRequest, opts ...grpc.CallOption) (*vlan.DestroyResponse, error) {
	out := new(vlan.DestroyResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/Destroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) DestroyAll(ctx context.Context, in *vlan.DestroyAllRequest, opts ...grpc.CallOption) (*vlan.DestroyAllResponse, error) {
	out := new(vlan.DestroyAllResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/DestroyAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) PortAdd(ctx context.Context, in *vlan.PortAddRequest, opts ...grpc.CallOption) (*vlan.PortAddResponse, error) {
	out := new(vlan.PortAddResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/PortAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) PortRemove(ctx context.Context, in *vlan.PortRemoveRequest, opts ...grpc.CallOption) (*vlan.PortRemoveRequest, error) {
	out := new(vlan.PortRemoveRequest)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/PortRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) GPortAdd(ctx context.Context, in *vlan.GPortAddRequest, opts ...grpc.CallOption) (*vlan.GPortAddResponse, error) {
	out := new(vlan.GPortAddResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/GPortAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) GPortDelete(ctx context.Context, in *vlan.GPortDeleteRequest, opts ...grpc.CallOption) (*vlan.GPortDeleteResponse, error) {
	out := new(vlan.GPortDeleteResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/GPortDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) GPortDeleteAll(ctx context.Context, in *vlan.GPortDeleteAllRequest, opts ...grpc.CallOption) (*vlan.GPortDeleteAllResponse, error) {
	out := new(vlan.GPortDeleteAllResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/GPortDeleteAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) List(ctx context.Context, in *vlan.ListRequest, opts ...grpc.CallOption) (*vlan.ListResponse, error) {
	out := new(vlan.ListResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) DefaultGet(ctx context.Context, in *vlan.DefaultGetRequest, opts ...grpc.CallOption) (*vlan.DefaultGetResponse, error) {
	out := new(vlan.DefaultGetResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/DefaultGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) DefaultSet(ctx context.Context, in *vlan.DefaultSetRequest, opts ...grpc.CallOption) (*vlan.DefaultSetResponse, error) {
	out := new(vlan.DefaultSetResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/DefaultSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) ControlSet(ctx context.Context, in *vlan.ControlSetRequest, opts ...grpc.CallOption) (*vlan.ControlSetResponse, error) {
	out := new(vlan.ControlSetResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/ControlSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vLANClient) ControlPortSet(ctx context.Context, in *vlan.ControlPortSetRequest, opts ...grpc.CallOption) (*vlan.ControlPortSetResponse, error) {
	out := new(vlan.ControlPortSetResponse)
	err := grpc.Invoke(ctx, "/vlanservice.VLAN/ControlPortSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VLAN service

type VLANServer interface {
	Create(context.Context, *vlan.CreateRequest) (*vlan.CreateResponse, error)
	Destroy(context.Context, *vlan.DestroyRequest) (*vlan.DestroyResponse, error)
	DestroyAll(context.Context, *vlan.DestroyAllRequest) (*vlan.DestroyAllResponse, error)
	PortAdd(context.Context, *vlan.PortAddRequest) (*vlan.PortAddResponse, error)
	PortRemove(context.Context, *vlan.PortRemoveRequest) (*vlan.PortRemoveRequest, error)
	GPortAdd(context.Context, *vlan.GPortAddRequest) (*vlan.GPortAddResponse, error)
	GPortDelete(context.Context, *vlan.GPortDeleteRequest) (*vlan.GPortDeleteResponse, error)
	GPortDeleteAll(context.Context, *vlan.GPortDeleteAllRequest) (*vlan.GPortDeleteAllResponse, error)
	List(context.Context, *vlan.ListRequest) (*vlan.ListResponse, error)
	DefaultGet(context.Context, *vlan.DefaultGetRequest) (*vlan.DefaultGetResponse, error)
	DefaultSet(context.Context, *vlan.DefaultSetRequest) (*vlan.DefaultSetResponse, error)
	ControlSet(context.Context, *vlan.ControlSetRequest) (*vlan.ControlSetResponse, error)
	ControlPortSet(context.Context, *vlan.ControlPortSetRequest) (*vlan.ControlPortSetResponse, error)
}

func RegisterVLANServer(s *grpc.Server, srv VLANServer) {
	s.RegisterService(&_VLAN_serviceDesc, srv)
}

func _VLAN_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).Create(ctx, req.(*vlan.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).Destroy(ctx, req.(*vlan.DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_DestroyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.DestroyAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).DestroyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/DestroyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).DestroyAll(ctx, req.(*vlan.DestroyAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_PortAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.PortAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).PortAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/PortAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).PortAdd(ctx, req.(*vlan.PortAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_PortRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.PortRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).PortRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/PortRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).PortRemove(ctx, req.(*vlan.PortRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_GPortAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.GPortAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).GPortAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/GPortAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).GPortAdd(ctx, req.(*vlan.GPortAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_GPortDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.GPortDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).GPortDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/GPortDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).GPortDelete(ctx, req.(*vlan.GPortDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_GPortDeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.GPortDeleteAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).GPortDeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/GPortDeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).GPortDeleteAll(ctx, req.(*vlan.GPortDeleteAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).List(ctx, req.(*vlan.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_DefaultGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.DefaultGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).DefaultGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/DefaultGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).DefaultGet(ctx, req.(*vlan.DefaultGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_DefaultSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.DefaultSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).DefaultSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/DefaultSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).DefaultSet(ctx, req.(*vlan.DefaultSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_ControlSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.ControlSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).ControlSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/ControlSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).ControlSet(ctx, req.(*vlan.ControlSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VLAN_ControlPortSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vlan.ControlPortSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VLANServer).ControlPortSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlanservice.VLAN/ControlPortSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VLANServer).ControlPortSet(ctx, req.(*vlan.ControlPortSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VLAN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vlanservice.VLAN",
	HandlerType: (*VLANServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VLAN_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _VLAN_Destroy_Handler,
		},
		{
			MethodName: "DestroyAll",
			Handler:    _VLAN_DestroyAll_Handler,
		},
		{
			MethodName: "PortAdd",
			Handler:    _VLAN_PortAdd_Handler,
		},
		{
			MethodName: "PortRemove",
			Handler:    _VLAN_PortRemove_Handler,
		},
		{
			MethodName: "GPortAdd",
			Handler:    _VLAN_GPortAdd_Handler,
		},
		{
			MethodName: "GPortDelete",
			Handler:    _VLAN_GPortDelete_Handler,
		},
		{
			MethodName: "GPortDeleteAll",
			Handler:    _VLAN_GPortDeleteAll_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VLAN_List_Handler,
		},
		{
			MethodName: "DefaultGet",
			Handler:    _VLAN_DefaultGet_Handler,
		},
		{
			MethodName: "DefaultSet",
			Handler:    _VLAN_DefaultSet_Handler,
		},
		{
			MethodName: "ControlSet",
			Handler:    _VLAN_ControlSet_Handler,
		},
		{
			MethodName: "ControlPortSet",
			Handler:    _VLAN_ControlPortSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("vlanservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0x7d, 0x18, 0x55, 0xee, 0x40, 0x58, 0xfc, 0x37, 0x37, 0x9f, 0xfc, 0x00, 0x13, 0x14,
	0x41, 0xf0, 0xc5, 0xb2, 0x42, 0x5f, 0xa6, 0xc8, 0x0a, 0xbe, 0x57, 0x77, 0x85, 0x41, 0x5c, 0x66,
	0x9a, 0x15, 0xfc, 0x98, 0x7e, 0xa3, 0x25, 0x6d, 0x6e, 0x9a, 0xa6, 0xdd, 0xdb, 0xee, 0xef, 0xdc,
	0x7b, 0x0e, 0x9c, 0xac, 0x30, 0x2a, 0x79, 0xbe, 0x29, 0x50, 0x96, 0xeb, 0x2f, 0x9c, 0x6d, 0xa5,
	0x50, 0x82, 0x0d, 0x3d, 0x34, 0x01, 0x33, 0xd4, 0xc2, 0xfd, 0x7f, 0x04, 0x83, 0x8f, 0x45, 0xfc,
	0xc6, 0x1e, 0x21, 0x9a, 0x4b, 0xcc, 0x15, 0xb2, 0xb3, 0x59, 0xa5, 0xd7, 0xd3, 0x12, 0x7f, 0x77,
	0x58, 0xa8, 0xc9, 0x79, 0x1b, 0x16, 0x5b, 0xa1, 0xed, 0x6e, 0x8f, 0xd8, 0x13, 0x1c, 0x27, 0x5a,
	0x97, 0xe2, 0x8f, 0xd9, 0x15, 0x3b, 0xd2, 0xe1, 0x45, 0x40, 0xdd, 0x65, 0x0c, 0x60, 0x61, 0xcc,
	0x39, 0xbb, 0x6a, 0xad, 0x69, 0x42, 0xf7, 0xe3, 0xae, 0xe0, 0x87, 0xbf, 0x0b, 0xa9, 0xe2, 0xd5,
	0x8a, 0xc2, 0xed, 0x18, 0x84, 0x3b, 0xea, 0x2e, 0x5f, 0x00, 0x0c, 0x5c, 0xe2, 0x8f, 0x28, 0x91,
	0xc2, 0x1b, 0x42, 0xf7, 0x87, 0x04, 0xed, 0xf0, 0x0c, 0x27, 0x29, 0x85, 0xdb, 0x98, 0x34, 0x48,
	0xbf, 0x0c, 0xb1, 0x8b, 0x4f, 0x60, 0x58, 0xd1, 0x04, 0x39, 0xea, 0xc6, 0xc7, 0xde, 0x62, 0x8d,
	0xc8, 0xe2, 0xba, 0x47, 0x71, 0x2e, 0xaf, 0x70, 0xea, 0x09, 0xa6, 0xc5, 0x69, 0x67, 0xdd, 0x6b,
	0xf2, 0xa6, 0x5f, 0x74, 0x76, 0x77, 0x30, 0x58, 0xac, 0x0b, 0xc5, 0x46, 0xf5, 0x9e, 0xf9, 0x4d,
	0xa7, 0xcc, 0x47, 0xed, 0x17, 0xfc, 0xce, 0x77, 0x5c, 0xa5, 0xa8, 0x9a, 0x17, 0x24, 0xd2, 0x79,
	0xc1, 0x46, 0xe8, 0xb1, 0xc8, 0x3a, 0x16, 0xd9, 0x21, 0x8b, 0x2c, 0xb4, 0x98, 0x8b, 0x8d, 0xfe,
	0x73, 0x70, 0xcf, 0xa2, 0x21, 0x81, 0x85, 0x2f, 0xf8, 0x45, 0x5a, 0x6e, 0xba, 0x31, 0x36, 0xd3,
	0xd6, 0xb6, 0xa5, 0x41, 0x91, 0xa1, 0x48, 0x76, 0x9f, 0x51, 0xf5, 0x69, 0x3d, 0xec, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x5b, 0xfd, 0x36, 0xb7, 0x88, 0x03, 0x00, 0x00,
}
