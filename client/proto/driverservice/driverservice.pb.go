// Code generated by protoc-gen-go.
// source: driverservice.proto
// DO NOT EDIT!

/*
Package driverservice is a generated protocol buffer package.

It is generated from these files:
	driverservice.proto

It has these top-level messages:
*/
package driverservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import driver "github.com/ishidawataru/opennsl-server/client/proto/driver"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Driver service

type DriverClient interface {
	Init(ctx context.Context, in *driver.InitRequest, opts ...grpc.CallOption) (*driver.InitResponse, error)
	GetVersion(ctx context.Context, in *driver.GetVersionRequest, opts ...grpc.CallOption) (*driver.GetVersionResponse, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Init(ctx context.Context, in *driver.InitRequest, opts ...grpc.CallOption) (*driver.InitResponse, error) {
	out := new(driver.InitResponse)
	err := grpc.Invoke(ctx, "/driverservice.Driver/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetVersion(ctx context.Context, in *driver.GetVersionRequest, opts ...grpc.CallOption) (*driver.GetVersionResponse, error) {
	out := new(driver.GetVersionResponse)
	err := grpc.Invoke(ctx, "/driverservice.Driver/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Driver service

type DriverServer interface {
	Init(context.Context, *driver.InitRequest) (*driver.InitResponse, error)
	GetVersion(context.Context, *driver.GetVersionRequest) (*driver.GetVersionResponse, error)
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(driver.InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverservice.Driver/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Init(ctx, req.(*driver.InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(driver.GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driverservice.Driver/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetVersion(ctx, req.(*driver.GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "driverservice.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Driver_Init_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Driver_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("driverservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x29, 0xca, 0x2c,
	0x4b, 0x2d, 0x2a, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x45, 0x11, 0x94, 0xe2, 0x81, 0x70, 0x21, 0x92, 0x46, 0x2d, 0x8c, 0x5c, 0x6c, 0x2e, 0x60,
	0x01, 0x21, 0x63, 0x2e, 0x16, 0xcf, 0xbc, 0xcc, 0x12, 0x21, 0x61, 0x3d, 0xa8, 0x0a, 0x10, 0x2f,
	0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x04, 0x55, 0xb0, 0xb8, 0x20, 0x3f, 0xaf, 0x38,
	0x55, 0x89, 0x41, 0xc8, 0x95, 0x8b, 0xcb, 0x3d, 0xb5, 0x24, 0x0c, 0x68, 0x7c, 0x66, 0x7e, 0x9e,
	0x90, 0x24, 0x4c, 0x15, 0x42, 0x0c, 0x66, 0x80, 0x14, 0x36, 0x29, 0x98, 0x31, 0x49, 0x6c, 0x60,
	0xd7, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x98, 0xb4, 0xf4, 0xce, 0xc1, 0x00, 0x00, 0x00,
}
