// Code generated by protoc-gen-go.
// source: l2service.proto
// DO NOT EDIT!

/*
Package l2service is a generated protocol buffer package.

It is generated from these files:
	l2service.proto

It has these top-level messages:
*/
package l2service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import l2 "github.com/ishidawataru/opennsl-server/client/proto/l2"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for L2 service

type L2Client interface {
	AddAddress(ctx context.Context, in *l2.AddAddressRequest, opts ...grpc.CallOption) (*l2.AddAddressResponse, error)
	DeleteAddress(ctx context.Context, in *l2.DeleteAddressRequest, opts ...grpc.CallOption) (*l2.DeleteAddressResponse, error)
	DeleteAddressByPort(ctx context.Context, in *l2.DeleteAddressByPortRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByPortResponse, error)
	DeleteAddressByMAC(ctx context.Context, in *l2.DeleteAddressByMACRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByMACResponse, error)
	DeleteAddressByVLAN(ctx context.Context, in *l2.DeleteAddressByVLANRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByVLANResponse, error)
	DeleteAddressByTrunk(ctx context.Context, in *l2.DeleteAddressByTrunkRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByTrunkResponse, error)
	DeleteAddressByMACPort(ctx context.Context, in *l2.DeleteAddressByMACPortRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByMACPortResponse, error)
	DeleteAddressByVLANPort(ctx context.Context, in *l2.DeleteAddressByVLANPortRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByVLANPortResponse, error)
	DeleteAddressByVLANTrunk(ctx context.Context, in *l2.DeleteAddressByVLANTrunkRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByVLANTrunkResponse, error)
	GetAddress(ctx context.Context, in *l2.GetAddressRequest, opts ...grpc.CallOption) (*l2.GetAddressResponse, error)
	Monitor(ctx context.Context, in *l2.MonitorRequest, opts ...grpc.CallOption) (L2_MonitorClient, error)
	SetAgeTimer(ctx context.Context, in *l2.SetAgeTimerRequest, opts ...grpc.CallOption) (*l2.SetAgeTimerResponse, error)
	GetAgeTimer(ctx context.Context, in *l2.GetAgeTimerRequest, opts ...grpc.CallOption) (*l2.GetAgeTimerResponse, error)
	List(ctx context.Context, in *l2.ListRequest, opts ...grpc.CallOption) (*l2.ListResponse, error)
}

type l2Client struct {
	cc *grpc.ClientConn
}

func NewL2Client(cc *grpc.ClientConn) L2Client {
	return &l2Client{cc}
}

func (c *l2Client) AddAddress(ctx context.Context, in *l2.AddAddressRequest, opts ...grpc.CallOption) (*l2.AddAddressResponse, error) {
	out := new(l2.AddAddressResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/AddAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) DeleteAddress(ctx context.Context, in *l2.DeleteAddressRequest, opts ...grpc.CallOption) (*l2.DeleteAddressResponse, error) {
	out := new(l2.DeleteAddressResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/DeleteAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) DeleteAddressByPort(ctx context.Context, in *l2.DeleteAddressByPortRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByPortResponse, error) {
	out := new(l2.DeleteAddressByPortResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/DeleteAddressByPort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) DeleteAddressByMAC(ctx context.Context, in *l2.DeleteAddressByMACRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByMACResponse, error) {
	out := new(l2.DeleteAddressByMACResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/DeleteAddressByMAC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) DeleteAddressByVLAN(ctx context.Context, in *l2.DeleteAddressByVLANRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByVLANResponse, error) {
	out := new(l2.DeleteAddressByVLANResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/DeleteAddressByVLAN", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) DeleteAddressByTrunk(ctx context.Context, in *l2.DeleteAddressByTrunkRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByTrunkResponse, error) {
	out := new(l2.DeleteAddressByTrunkResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/DeleteAddressByTrunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) DeleteAddressByMACPort(ctx context.Context, in *l2.DeleteAddressByMACPortRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByMACPortResponse, error) {
	out := new(l2.DeleteAddressByMACPortResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/DeleteAddressByMACPort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) DeleteAddressByVLANPort(ctx context.Context, in *l2.DeleteAddressByVLANPortRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByVLANPortResponse, error) {
	out := new(l2.DeleteAddressByVLANPortResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/DeleteAddressByVLANPort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) DeleteAddressByVLANTrunk(ctx context.Context, in *l2.DeleteAddressByVLANTrunkRequest, opts ...grpc.CallOption) (*l2.DeleteAddressByVLANTrunkResponse, error) {
	out := new(l2.DeleteAddressByVLANTrunkResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/DeleteAddressByVLANTrunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) GetAddress(ctx context.Context, in *l2.GetAddressRequest, opts ...grpc.CallOption) (*l2.GetAddressResponse, error) {
	out := new(l2.GetAddressResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/GetAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) Monitor(ctx context.Context, in *l2.MonitorRequest, opts ...grpc.CallOption) (L2_MonitorClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_L2_serviceDesc.Streams[0], c.cc, "/l2service.L2/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &l2MonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type L2_MonitorClient interface {
	Recv() (*l2.MonitorResponse, error)
	grpc.ClientStream
}

type l2MonitorClient struct {
	grpc.ClientStream
}

func (x *l2MonitorClient) Recv() (*l2.MonitorResponse, error) {
	m := new(l2.MonitorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *l2Client) SetAgeTimer(ctx context.Context, in *l2.SetAgeTimerRequest, opts ...grpc.CallOption) (*l2.SetAgeTimerResponse, error) {
	out := new(l2.SetAgeTimerResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/SetAgeTimer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) GetAgeTimer(ctx context.Context, in *l2.GetAgeTimerRequest, opts ...grpc.CallOption) (*l2.GetAgeTimerResponse, error) {
	out := new(l2.GetAgeTimerResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/GetAgeTimer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2Client) List(ctx context.Context, in *l2.ListRequest, opts ...grpc.CallOption) (*l2.ListResponse, error) {
	out := new(l2.ListResponse)
	err := grpc.Invoke(ctx, "/l2service.L2/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for L2 service

type L2Server interface {
	AddAddress(context.Context, *l2.AddAddressRequest) (*l2.AddAddressResponse, error)
	DeleteAddress(context.Context, *l2.DeleteAddressRequest) (*l2.DeleteAddressResponse, error)
	DeleteAddressByPort(context.Context, *l2.DeleteAddressByPortRequest) (*l2.DeleteAddressByPortResponse, error)
	DeleteAddressByMAC(context.Context, *l2.DeleteAddressByMACRequest) (*l2.DeleteAddressByMACResponse, error)
	DeleteAddressByVLAN(context.Context, *l2.DeleteAddressByVLANRequest) (*l2.DeleteAddressByVLANResponse, error)
	DeleteAddressByTrunk(context.Context, *l2.DeleteAddressByTrunkRequest) (*l2.DeleteAddressByTrunkResponse, error)
	DeleteAddressByMACPort(context.Context, *l2.DeleteAddressByMACPortRequest) (*l2.DeleteAddressByMACPortResponse, error)
	DeleteAddressByVLANPort(context.Context, *l2.DeleteAddressByVLANPortRequest) (*l2.DeleteAddressByVLANPortResponse, error)
	DeleteAddressByVLANTrunk(context.Context, *l2.DeleteAddressByVLANTrunkRequest) (*l2.DeleteAddressByVLANTrunkResponse, error)
	GetAddress(context.Context, *l2.GetAddressRequest) (*l2.GetAddressResponse, error)
	Monitor(*l2.MonitorRequest, L2_MonitorServer) error
	SetAgeTimer(context.Context, *l2.SetAgeTimerRequest) (*l2.SetAgeTimerResponse, error)
	GetAgeTimer(context.Context, *l2.GetAgeTimerRequest) (*l2.GetAgeTimerResponse, error)
	List(context.Context, *l2.ListRequest) (*l2.ListResponse, error)
}

func RegisterL2Server(s *grpc.Server, srv L2Server) {
	s.RegisterService(&_L2_serviceDesc, srv)
}

func _L2_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).AddAddress(ctx, req.(*l2.AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).DeleteAddress(ctx, req.(*l2.DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_DeleteAddressByPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.DeleteAddressByPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).DeleteAddressByPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/DeleteAddressByPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).DeleteAddressByPort(ctx, req.(*l2.DeleteAddressByPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_DeleteAddressByMAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.DeleteAddressByMACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).DeleteAddressByMAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/DeleteAddressByMAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).DeleteAddressByMAC(ctx, req.(*l2.DeleteAddressByMACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_DeleteAddressByVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.DeleteAddressByVLANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).DeleteAddressByVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/DeleteAddressByVLAN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).DeleteAddressByVLAN(ctx, req.(*l2.DeleteAddressByVLANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_DeleteAddressByTrunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.DeleteAddressByTrunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).DeleteAddressByTrunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/DeleteAddressByTrunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).DeleteAddressByTrunk(ctx, req.(*l2.DeleteAddressByTrunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_DeleteAddressByMACPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.DeleteAddressByMACPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).DeleteAddressByMACPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/DeleteAddressByMACPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).DeleteAddressByMACPort(ctx, req.(*l2.DeleteAddressByMACPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_DeleteAddressByVLANPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.DeleteAddressByVLANPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).DeleteAddressByVLANPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/DeleteAddressByVLANPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).DeleteAddressByVLANPort(ctx, req.(*l2.DeleteAddressByVLANPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_DeleteAddressByVLANTrunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.DeleteAddressByVLANTrunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).DeleteAddressByVLANTrunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/DeleteAddressByVLANTrunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).DeleteAddressByVLANTrunk(ctx, req.(*l2.DeleteAddressByVLANTrunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).GetAddress(ctx, req.(*l2.GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(l2.MonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(L2Server).Monitor(m, &l2MonitorServer{stream})
}

type L2_MonitorServer interface {
	Send(*l2.MonitorResponse) error
	grpc.ServerStream
}

type l2MonitorServer struct {
	grpc.ServerStream
}

func (x *l2MonitorServer) Send(m *l2.MonitorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _L2_SetAgeTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.SetAgeTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).SetAgeTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/SetAgeTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).SetAgeTimer(ctx, req.(*l2.SetAgeTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_GetAgeTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.GetAgeTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).GetAgeTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/GetAgeTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).GetAgeTimer(ctx, req.(*l2.GetAgeTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2Server).List(ctx, req.(*l2.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _L2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "l2service.L2",
	HandlerType: (*L2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAddress",
			Handler:    _L2_AddAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _L2_DeleteAddress_Handler,
		},
		{
			MethodName: "DeleteAddressByPort",
			Handler:    _L2_DeleteAddressByPort_Handler,
		},
		{
			MethodName: "DeleteAddressByMAC",
			Handler:    _L2_DeleteAddressByMAC_Handler,
		},
		{
			MethodName: "DeleteAddressByVLAN",
			Handler:    _L2_DeleteAddressByVLAN_Handler,
		},
		{
			MethodName: "DeleteAddressByTrunk",
			Handler:    _L2_DeleteAddressByTrunk_Handler,
		},
		{
			MethodName: "DeleteAddressByMACPort",
			Handler:    _L2_DeleteAddressByMACPort_Handler,
		},
		{
			MethodName: "DeleteAddressByVLANPort",
			Handler:    _L2_DeleteAddressByVLANPort_Handler,
		},
		{
			MethodName: "DeleteAddressByVLANTrunk",
			Handler:    _L2_DeleteAddressByVLANTrunk_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _L2_GetAddress_Handler,
		},
		{
			MethodName: "SetAgeTimer",
			Handler:    _L2_SetAgeTimer_Handler,
		},
		{
			MethodName: "GetAgeTimer",
			Handler:    _L2_GetAgeTimer_Handler,
		},
		{
			MethodName: "List",
			Handler:    _L2_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _L2_Monitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for L2Station service

type L2StationClient interface {
	Add(ctx context.Context, in *l2.StationAddRequest, opts ...grpc.CallOption) (*l2.StationAddResponse, error)
	Delete(ctx context.Context, in *l2.StationDeleteRequest, opts ...grpc.CallOption) (*l2.StationDeleteResponse, error)
	Get(ctx context.Context, in *l2.StationGetRequest, opts ...grpc.CallOption) (*l2.StationGetResponse, error)
}

type l2StationClient struct {
	cc *grpc.ClientConn
}

func NewL2StationClient(cc *grpc.ClientConn) L2StationClient {
	return &l2StationClient{cc}
}

func (c *l2StationClient) Add(ctx context.Context, in *l2.StationAddRequest, opts ...grpc.CallOption) (*l2.StationAddResponse, error) {
	out := new(l2.StationAddResponse)
	err := grpc.Invoke(ctx, "/l2service.L2Station/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2StationClient) Delete(ctx context.Context, in *l2.StationDeleteRequest, opts ...grpc.CallOption) (*l2.StationDeleteResponse, error) {
	out := new(l2.StationDeleteResponse)
	err := grpc.Invoke(ctx, "/l2service.L2Station/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2StationClient) Get(ctx context.Context, in *l2.StationGetRequest, opts ...grpc.CallOption) (*l2.StationGetResponse, error) {
	out := new(l2.StationGetResponse)
	err := grpc.Invoke(ctx, "/l2service.L2Station/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for L2Station service

type L2StationServer interface {
	Add(context.Context, *l2.StationAddRequest) (*l2.StationAddResponse, error)
	Delete(context.Context, *l2.StationDeleteRequest) (*l2.StationDeleteResponse, error)
	Get(context.Context, *l2.StationGetRequest) (*l2.StationGetResponse, error)
}

func RegisterL2StationServer(s *grpc.Server, srv L2StationServer) {
	s.RegisterService(&_L2Station_serviceDesc, srv)
}

func _L2Station_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.StationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2StationServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2Station/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2StationServer).Add(ctx, req.(*l2.StationAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2Station_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.StationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2StationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2Station/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2StationServer).Delete(ctx, req.(*l2.StationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2Station_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(l2.StationGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2StationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2service.L2Station/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2StationServer).Get(ctx, req.(*l2.StationGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _L2Station_serviceDesc = grpc.ServiceDesc{
	ServiceName: "l2service.L2Station",
	HandlerType: (*L2StationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _L2Station_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _L2Station_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _L2Station_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("l2service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0xd1, 0x4e, 0xc2, 0x30,
	0x14, 0x15, 0x31, 0x08, 0xd7, 0x18, 0x4c, 0x51, 0x40, 0x12, 0x51, 0xd1, 0x37, 0x13, 0x62, 0x66,
	0xe2, 0x9b, 0x51, 0xd4, 0xb8, 0x97, 0x61, 0x8c, 0xa0, 0x31, 0xf1, 0x09, 0xa5, 0x21, 0x8b, 0xb8,
	0x62, 0x5b, 0x4c, 0xfc, 0x37, 0x7f, 0xc1, 0x7f, 0xb2, 0x5b, 0x69, 0x59, 0xb7, 0x6e, 0x09, 0x0f,
	0xdc, 0x73, 0xce, 0x3d, 0xa7, 0xf7, 0x2e, 0x2d, 0x54, 0xa7, 0x0e, 0xc3, 0xf4, 0xdb, 0x7f, 0xc7,
	0xdd, 0x19, 0x25, 0x9c, 0xa0, 0x8a, 0x06, 0x5a, 0xe5, 0xa9, 0x23, 0x41, 0xe7, 0xaf, 0x0c, 0xab,
	0x9e, 0x83, 0x2e, 0x00, 0x7a, 0xe3, 0xb1, 0xf8, 0x51, 0xcc, 0x18, 0xda, 0xe9, 0x0a, 0x7e, 0x59,
	0x3f, 0xe2, 0xaf, 0x39, 0x66, 0xbc, 0x55, 0x4f, 0xc2, 0x6c, 0x46, 0x02, 0x86, 0x3b, 0x2b, 0xe8,
	0x0e, 0x36, 0x6f, 0xf1, 0x14, 0x73, 0xac, 0x1c, 0x9a, 0xa1, 0xd4, 0x80, 0x94, 0xc9, 0xae, 0x85,
	0xd1, 0x3e, 0x2f, 0x50, 0x33, 0xa8, 0xeb, 0x9f, 0x07, 0x42, 0x39, 0x6a, 0xa7, 0x7a, 0x24, 0xa1,
	0x3c, 0xf7, 0x33, 0x79, 0xed, 0xfc, 0x04, 0x28, 0x21, 0xe8, 0xf7, 0x6e, 0xd0, 0x9e, 0xa5, 0x51,
	0xe0, 0xca, 0xb7, 0x9d, 0x45, 0xe7, 0x1c, 0xf8, 0xd9, 0xeb, 0xdd, 0x5b, 0x0f, 0x1c, 0x12, 0x79,
	0x07, 0x96, 0xbc, 0x76, 0x7e, 0x85, 0xed, 0x84, 0x60, 0x48, 0xe7, 0xc1, 0x07, 0xb2, 0xb5, 0x46,
	0x8c, 0xf2, 0x3e, 0xc8, 0x16, 0x68, 0xf3, 0x11, 0xd4, 0xd3, 0x63, 0x45, 0xab, 0x3e, 0xb4, 0x8f,
	0x1c, 0xdf, 0x76, 0x27, 0x4f, 0xa2, 0x23, 0xc6, 0xd0, 0xb0, 0x0c, 0x18, 0x65, 0x74, 0x32, 0xa6,
	0x8f, 0x87, 0x1c, 0xe5, 0x6a, 0x74, 0xca, 0x04, 0x9a, 0x16, 0x91, 0xdc, 0x54, 0x96, 0x85, 0xb1,
	0xad, 0xe3, 0x7c, 0x91, 0x0e, 0x12, 0x17, 0xc4, 0xc5, 0xdc, 0xb8, 0x20, 0xcb, 0xda, 0xb8, 0x20,
	0x71, 0x58, 0xb7, 0x9f, 0xc3, 0x7a, 0x9f, 0x04, 0x3e, 0x27, 0x14, 0xa1, 0x50, 0xb4, 0x28, 0x54,
	0x63, 0xcd, 0xc0, 0x54, 0xd7, 0x69, 0x01, 0x5d, 0xc1, 0xc6, 0x40, 0xf8, 0x4d, 0xf0, 0xd0, 0xff,
	0xc4, 0x14, 0x45, 0x01, 0x31, 0x40, 0xf5, 0x37, 0x52, 0xb8, 0x4e, 0x16, 0x0e, 0x6e, 0xd2, 0xc1,
	0xcd, 0x70, 0x70, 0xad, 0x0e, 0x27, 0xb0, 0xe6, 0xf9, 0x8c, 0xa3, 0x6a, 0x28, 0x09, 0xff, 0xa9,
	0x9e, 0xad, 0x25, 0xa0, 0xc4, 0xce, 0x6f, 0x01, 0x2a, 0x9e, 0x33, 0xe0, 0x23, 0xee, 0x93, 0x40,
	0x8c, 0x5d, 0x14, 0xbb, 0x90, 0xeb, 0x5a, 0x60, 0xa2, 0x36, 0xd6, 0x15, 0x87, 0x75, 0xe4, 0x25,
	0x94, 0xe4, 0x37, 0x91, 0x0f, 0xc9, 0x42, 0x23, 0x21, 0xe3, 0x21, 0x49, 0x30, 0xb1, 0x7d, 0x17,
	0xc5, 0x30, 0x46, 0xb0, 0xa8, 0x6d, 0xc1, 0x11, 0xac, 0xfa, 0xde, 0x4a, 0xd1, 0xab, 0x78, 0xf6,
	0x1f, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xa6, 0xc5, 0x07, 0x3d, 0x05, 0x00, 0x00,
}
