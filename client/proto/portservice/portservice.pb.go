// Code generated by protoc-gen-go.
// source: portservice.proto
// DO NOT EDIT!

/*
Package portservice is a generated protocol buffer package.

It is generated from these files:
	portservice.proto

It has these top-level messages:
*/
package portservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import port "github.com/ishidawataru/opennsl-server/client/proto/port"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Port service

type PortClient interface {
	Init(ctx context.Context, in *port.InitRequest, opts ...grpc.CallOption) (*port.InitResponse, error)
	Clear(ctx context.Context, in *port.ClearRequest, opts ...grpc.CallOption) (*port.ClearResponse, error)
	Probe(ctx context.Context, in *port.ProbeRequest, opts ...grpc.CallOption) (*port.ProbeResponse, error)
	Detach(ctx context.Context, in *port.DetachRequest, opts ...grpc.CallOption) (*port.DetachResponse, error)
	GetConfig(ctx context.Context, in *port.GetConfigRequest, opts ...grpc.CallOption) (*port.GetConfigResponse, error)
	GetPortName(ctx context.Context, in *port.GetPortNameRequest, opts ...grpc.CallOption) (*port.GetPortNameResponse, error)
	PortEnableSet(ctx context.Context, in *port.PortEnableSetRequest, opts ...grpc.CallOption) (*port.PortEnableSetResponse, error)
	PortEnableGet(ctx context.Context, in *port.PortEnableGetRequest, opts ...grpc.CallOption) (*port.PortEnableGetResponse, error)
	PortAdvertSet(ctx context.Context, in *port.PortAdvertSetRequest, opts ...grpc.CallOption) (*port.PortAdvertSetResponse, error)
	PortAdvertGet(ctx context.Context, in *port.PortAdvertGetRequest, opts ...grpc.CallOption) (*port.PortAdvertGetResponse, error)
	PortAbilityAdvertSet(ctx context.Context, in *port.PortAbilityAdvertSetRequest, opts ...grpc.CallOption) (*port.PortAbilityAdvertSetResponse, error)
	PortAbilityAdvertGet(ctx context.Context, in *port.PortAbilityAdvertGetRequest, opts ...grpc.CallOption) (*port.PortAbilityAdvertGetResponse, error)
	PortAdvertRemoteGet(ctx context.Context, in *port.PortAdvertRemoteGetRequest, opts ...grpc.CallOption) (*port.PortAdvertRemoteGetResponse, error)
	PortAbilityRemoteGet(ctx context.Context, in *port.PortAbilityRemoteGetRequest, opts ...grpc.CallOption) (*port.PortAbilityRemoteGetResponse, error)
	PortAbilityGet(ctx context.Context, in *port.PortAbilityGetRequest, opts ...grpc.CallOption) (*port.PortAbilityGetResponse, error)
	PortAbilityLocalGet(ctx context.Context, in *port.PortAbilityLocalGetRequest, opts ...grpc.CallOption) (*port.PortAbilityLocalGetResponse, error)
}

type portClient struct {
	cc *grpc.ClientConn
}

func NewPortClient(cc *grpc.ClientConn) PortClient {
	return &portClient{cc}
}

func (c *portClient) Init(ctx context.Context, in *port.InitRequest, opts ...grpc.CallOption) (*port.InitResponse, error) {
	out := new(port.InitResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) Clear(ctx context.Context, in *port.ClearRequest, opts ...grpc.CallOption) (*port.ClearResponse, error) {
	out := new(port.ClearResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/Clear", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) Probe(ctx context.Context, in *port.ProbeRequest, opts ...grpc.CallOption) (*port.ProbeResponse, error) {
	out := new(port.ProbeResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/Probe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) Detach(ctx context.Context, in *port.DetachRequest, opts ...grpc.CallOption) (*port.DetachResponse, error) {
	out := new(port.DetachResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/Detach", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetConfig(ctx context.Context, in *port.GetConfigRequest, opts ...grpc.CallOption) (*port.GetConfigResponse, error) {
	out := new(port.GetConfigResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortName(ctx context.Context, in *port.GetPortNameRequest, opts ...grpc.CallOption) (*port.GetPortNameResponse, error) {
	out := new(port.GetPortNameResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/GetPortName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortEnableSet(ctx context.Context, in *port.PortEnableSetRequest, opts ...grpc.CallOption) (*port.PortEnableSetResponse, error) {
	out := new(port.PortEnableSetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortEnableSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortEnableGet(ctx context.Context, in *port.PortEnableGetRequest, opts ...grpc.CallOption) (*port.PortEnableGetResponse, error) {
	out := new(port.PortEnableGetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortEnableGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortAdvertSet(ctx context.Context, in *port.PortAdvertSetRequest, opts ...grpc.CallOption) (*port.PortAdvertSetResponse, error) {
	out := new(port.PortAdvertSetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortAdvertSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortAdvertGet(ctx context.Context, in *port.PortAdvertGetRequest, opts ...grpc.CallOption) (*port.PortAdvertGetResponse, error) {
	out := new(port.PortAdvertGetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortAdvertGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortAbilityAdvertSet(ctx context.Context, in *port.PortAbilityAdvertSetRequest, opts ...grpc.CallOption) (*port.PortAbilityAdvertSetResponse, error) {
	out := new(port.PortAbilityAdvertSetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortAbilityAdvertSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortAbilityAdvertGet(ctx context.Context, in *port.PortAbilityAdvertGetRequest, opts ...grpc.CallOption) (*port.PortAbilityAdvertGetResponse, error) {
	out := new(port.PortAbilityAdvertGetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortAbilityAdvertGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortAdvertRemoteGet(ctx context.Context, in *port.PortAdvertRemoteGetRequest, opts ...grpc.CallOption) (*port.PortAdvertRemoteGetResponse, error) {
	out := new(port.PortAdvertRemoteGetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortAdvertRemoteGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortAbilityRemoteGet(ctx context.Context, in *port.PortAbilityRemoteGetRequest, opts ...grpc.CallOption) (*port.PortAbilityRemoteGetResponse, error) {
	out := new(port.PortAbilityRemoteGetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortAbilityRemoteGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortAbilityGet(ctx context.Context, in *port.PortAbilityGetRequest, opts ...grpc.CallOption) (*port.PortAbilityGetResponse, error) {
	out := new(port.PortAbilityGetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortAbilityGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortAbilityLocalGet(ctx context.Context, in *port.PortAbilityLocalGetRequest, opts ...grpc.CallOption) (*port.PortAbilityLocalGetResponse, error) {
	out := new(port.PortAbilityLocalGetResponse)
	err := grpc.Invoke(ctx, "/portservice.Port/PortAbilityLocalGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Port service

type PortServer interface {
	Init(context.Context, *port.InitRequest) (*port.InitResponse, error)
	Clear(context.Context, *port.ClearRequest) (*port.ClearResponse, error)
	Probe(context.Context, *port.ProbeRequest) (*port.ProbeResponse, error)
	Detach(context.Context, *port.DetachRequest) (*port.DetachResponse, error)
	GetConfig(context.Context, *port.GetConfigRequest) (*port.GetConfigResponse, error)
	GetPortName(context.Context, *port.GetPortNameRequest) (*port.GetPortNameResponse, error)
	PortEnableSet(context.Context, *port.PortEnableSetRequest) (*port.PortEnableSetResponse, error)
	PortEnableGet(context.Context, *port.PortEnableGetRequest) (*port.PortEnableGetResponse, error)
	PortAdvertSet(context.Context, *port.PortAdvertSetRequest) (*port.PortAdvertSetResponse, error)
	PortAdvertGet(context.Context, *port.PortAdvertGetRequest) (*port.PortAdvertGetResponse, error)
	PortAbilityAdvertSet(context.Context, *port.PortAbilityAdvertSetRequest) (*port.PortAbilityAdvertSetResponse, error)
	PortAbilityAdvertGet(context.Context, *port.PortAbilityAdvertGetRequest) (*port.PortAbilityAdvertGetResponse, error)
	PortAdvertRemoteGet(context.Context, *port.PortAdvertRemoteGetRequest) (*port.PortAdvertRemoteGetResponse, error)
	PortAbilityRemoteGet(context.Context, *port.PortAbilityRemoteGetRequest) (*port.PortAbilityRemoteGetResponse, error)
	PortAbilityGet(context.Context, *port.PortAbilityGetRequest) (*port.PortAbilityGetResponse, error)
	PortAbilityLocalGet(context.Context, *port.PortAbilityLocalGetRequest) (*port.PortAbilityLocalGetResponse, error)
}

func RegisterPortServer(s *grpc.Server, srv PortServer) {
	s.RegisterService(&_Port_serviceDesc, srv)
}

func _Port_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).Init(ctx, req.(*port.InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).Clear(ctx, req.(*port.ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).Probe(ctx, req.(*port.ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.DetachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).Detach(ctx, req.(*port.DetachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetConfig(ctx, req.(*port.GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.GetPortNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/GetPortName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortName(ctx, req.(*port.GetPortNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortEnableSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortEnableSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortEnableSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortEnableSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortEnableSet(ctx, req.(*port.PortEnableSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortEnableGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortEnableGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortEnableGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortEnableGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortEnableGet(ctx, req.(*port.PortEnableGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortAdvertSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortAdvertSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortAdvertSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortAdvertSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortAdvertSet(ctx, req.(*port.PortAdvertSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortAdvertGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortAdvertGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortAdvertGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortAdvertGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortAdvertGet(ctx, req.(*port.PortAdvertGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortAbilityAdvertSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortAbilityAdvertSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortAbilityAdvertSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortAbilityAdvertSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortAbilityAdvertSet(ctx, req.(*port.PortAbilityAdvertSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortAbilityAdvertGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortAbilityAdvertGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortAbilityAdvertGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortAbilityAdvertGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortAbilityAdvertGet(ctx, req.(*port.PortAbilityAdvertGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortAdvertRemoteGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortAdvertRemoteGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortAdvertRemoteGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortAdvertRemoteGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortAdvertRemoteGet(ctx, req.(*port.PortAdvertRemoteGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortAbilityRemoteGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortAbilityRemoteGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortAbilityRemoteGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortAbilityRemoteGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortAbilityRemoteGet(ctx, req.(*port.PortAbilityRemoteGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortAbilityGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortAbilityGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortAbilityGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortAbilityGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortAbilityGet(ctx, req.(*port.PortAbilityGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortAbilityLocalGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(port.PortAbilityLocalGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortAbilityLocalGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portservice.Port/PortAbilityLocalGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortAbilityLocalGet(ctx, req.(*port.PortAbilityLocalGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Port_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portservice.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Port_Init_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _Port_Clear_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _Port_Probe_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _Port_Detach_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Port_GetConfig_Handler,
		},
		{
			MethodName: "GetPortName",
			Handler:    _Port_GetPortName_Handler,
		},
		{
			MethodName: "PortEnableSet",
			Handler:    _Port_PortEnableSet_Handler,
		},
		{
			MethodName: "PortEnableGet",
			Handler:    _Port_PortEnableGet_Handler,
		},
		{
			MethodName: "PortAdvertSet",
			Handler:    _Port_PortAdvertSet_Handler,
		},
		{
			MethodName: "PortAdvertGet",
			Handler:    _Port_PortAdvertGet_Handler,
		},
		{
			MethodName: "PortAbilityAdvertSet",
			Handler:    _Port_PortAbilityAdvertSet_Handler,
		},
		{
			MethodName: "PortAbilityAdvertGet",
			Handler:    _Port_PortAbilityAdvertGet_Handler,
		},
		{
			MethodName: "PortAdvertRemoteGet",
			Handler:    _Port_PortAdvertRemoteGet_Handler,
		},
		{
			MethodName: "PortAbilityRemoteGet",
			Handler:    _Port_PortAbilityRemoteGet_Handler,
		},
		{
			MethodName: "PortAbilityGet",
			Handler:    _Port_PortAbilityGet_Handler,
		},
		{
			MethodName: "PortAbilityLocalGet",
			Handler:    _Port_PortAbilityLocalGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("portservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x94, 0x5d, 0x4b, 0xf3, 0x30,
	0x14, 0xc7, 0x9f, 0x8b, 0x3d, 0x83, 0x9d, 0xa1, 0xb0, 0x6c, 0xf8, 0xb2, 0x79, 0xe1, 0xf6, 0x01,
	0x26, 0x4c, 0xbc, 0x15, 0x64, 0x93, 0xa0, 0xa8, 0x8c, 0x79, 0x2b, 0x48, 0x3b, 0x8f, 0x5a, 0xe8,
	0x9a, 0x9a, 0xc6, 0x81, 0x5f, 0xcd, 0x4f, 0xe7, 0x9a, 0x36, 0x69, 0x9a, 0xc6, 0x78, 0xb7, 0xf3,
	0x7f, 0xf9, 0xe5, 0x24, 0x83, 0x42, 0x2f, 0x65, 0x5c, 0x64, 0xc8, 0xb7, 0xd1, 0x1a, 0xa7, 0x29,
	0x67, 0x82, 0x91, 0xae, 0x21, 0x0d, 0x21, 0x1f, 0x0a, 0x63, 0xf6, 0xdd, 0x81, 0xd6, 0x72, 0x37,
	0x92, 0x33, 0x68, 0xdd, 0x24, 0x91, 0x20, 0xbd, 0xa9, 0x74, 0xf3, 0xdf, 0x2b, 0xfc, 0xf8, 0xc4,
	0x4c, 0x0c, 0x89, 0x29, 0x65, 0x29, 0x4b, 0x32, 0x9c, 0xfc, 0x23, 0x33, 0xf8, 0x3f, 0x8f, 0x31,
	0xe0, 0xa4, 0xb4, 0xe5, 0xa0, 0x2a, 0xfd, 0x9a, 0x66, 0x76, 0x96, 0x9c, 0x85, 0xa8, 0x3a, 0x72,
	0xb0, 0x3a, 0xa5, 0xa6, 0x3b, 0x17, 0xd0, 0x5e, 0xa0, 0x08, 0xd6, 0xef, 0xa4, 0x0c, 0x14, 0x93,
	0x6a, 0x0d, 0xea, 0xa2, 0xae, 0x5d, 0x42, 0x87, 0xa2, 0x98, 0xb3, 0xe4, 0x35, 0x7a, 0x23, 0x07,
	0x45, 0x48, 0x0b, 0xaa, 0x7c, 0xd8, 0xd0, 0x75, 0x7f, 0x01, 0xdd, 0x9d, 0x9c, 0x3f, 0xcd, 0x43,
	0xb0, 0x41, 0x72, 0xa4, 0x93, 0x4a, 0x52, 0x8c, 0x63, 0x87, 0xa3, 0x29, 0xb7, 0xb0, 0x97, 0xab,
	0xd7, 0x49, 0x10, 0xc6, 0xf8, 0x88, 0x82, 0x0c, 0xcb, 0x4b, 0x9a, 0xa2, 0x22, 0x8d, 0x9c, 0x9e,
	0x9b, 0x45, 0x5d, 0x2c, 0xea, 0x61, 0x51, 0x17, 0xeb, 0xea, 0x65, 0x8b, 0x5c, 0x58, 0x7b, 0x69,
	0xd1, 0xc1, 0x32, 0x3c, 0x37, 0x8b, 0xba, 0x58, 0xd4, 0xc3, 0xaa, 0xef, 0xf5, 0x0c, 0x03, 0x69,
	0x85, 0x51, 0x1c, 0x89, 0xaf, 0x6a, 0xbd, 0xb1, 0x51, 0xb3, 0x3c, 0x45, 0x9e, 0xf8, 0x22, 0xde,
	0x03, 0xa8, 0xe7, 0x00, 0xfa, 0xf7, 0x01, 0xf5, 0x1b, 0x3c, 0x41, 0xbf, 0xba, 0xdc, 0x0a, 0x37,
	0x4c, 0xc8, 0xff, 0xea, 0xd4, 0xbe, 0xb7, 0xb6, 0x14, 0x7e, 0xec, 0x49, 0xfc, 0xb2, 0x7e, 0x85,
	0x6f, 0xae, 0xdf, 0xe0, 0x4f, 0x7c, 0x11, 0x7d, 0xc0, 0x3d, 0xec, 0x1b, 0x89, 0x1c, 0x3d, 0x6a,
	0xf4, 0x0c, 0xe8, 0x89, 0xdb, 0x6c, 0xbc, 0x46, 0xe1, 0xdd, 0xb1, 0x75, 0x10, 0xdb, 0xaf, 0x51,
	0xb7, 0x5c, 0xaf, 0x61, 0x27, 0x14, 0x3d, 0x6c, 0xcb, 0x6f, 0xd8, 0xf9, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xef, 0x24, 0x41, 0x22, 0xf1, 0x04, 0x00, 0x00,
}
